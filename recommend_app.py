import pandas as pd
import streamlit as st
from geopy.geocoders import Nominatim
from geopy.distance import geodesic
import folium
from streamlit_folium import st_folium
from folium.plugins import HeatMap
import unicodedata
import re

# ----------------- Load d·ªØ li·ªáu -----------------
df_sku = pd.read_excel("M·∫Øt K√≠nh Data.xlsx", sheet_name="SKU")
df_store = pd.read_excel("M·∫Øt K√≠nh Data.xlsx", sheet_name="C·ª≠a h√†ng")

df_store[['Lat', 'Lon']] = df_store['T·ªça ƒë·ªô'].str.strip().str.split(',', expand=True)
df_store['Lat'] = df_store['Lat'].astype(float)
df_store['Lon'] = df_store['Lon'].str.strip().astype(float)

df_sku.columns = df_sku.columns.str.strip()
df_sku['Price'] = df_sku['Price'].astype(float)

# ----------------- Giao di·ªán ng∆∞·ªùi d√πng -----------------
st.set_page_config(page_title="ƒê·ªÅ xu·∫•t c·ª≠a h√†ng m·∫Øt k√≠nh", layout="wide")

st.markdown("<h1 style='text-align: center; color: #4CAF50;'>üï∂Ô∏è G·ª£i √Ω c·ª≠a h√†ng m·∫Øt k√≠nh</h1>", unsafe_allow_html=True)
st.markdown("<p style='text-align: center;'>T√¨m c·ª≠a h√†ng g·∫ßn b·∫°n nh·∫•t v·ªõi nhi·ªÅu s·∫£n ph·∫©m trong t·∫ßm gi√°</p>", unsafe_allow_html=True)
st.markdown("---")

# ----------------- T·∫°o 2 c·ªôt giao di·ªán song song -----------------
col1, spacer, col2 = st.columns([1.3, 0.2, 1.3])  # spacer ƒë·ªÉ t·∫°o kho·∫£ng c√°ch

with col1:
    st.markdown("### üìç Nh·∫≠p th√¥ng tin")
    min_price = st.number_input("Ng√¢n s√°ch t·ªëi thi·ªÉu (VND)", value=500000, step=50000, format="%d")
    max_price = st.number_input("Ng√¢n s√°ch t·ªëi ƒëa (VND)", value=1000000, step=50000, format="%d")
    user_address = st.text_input("ƒê·ªãa ch·ªâ hi·ªán t·∫°i c·ªßa b·∫°n:", value="72 L√™ Th√°nh T√¥n, Qu·∫≠n 1, TP.HCM")
    st.caption(f"üí∞ Ng√¢n s√°ch b·∫°n ch·ªçn: **{min_price:,} VND** ƒë·∫øn **{max_price:,} VND**")

with col2:
    st.markdown("### üìÇ B·ªô l·ªçc n√¢ng cao")
    selected_colors = st.multiselect("üé® M√†u s·∫Øc", options=df_sku["Color"].dropna().unique())
    selected_types = st.multiselect("üëì Ki·ªÉu d√°ng", options=df_sku["Type"].dropna().unique())
    selected_brands = st.multiselect("üè∑Ô∏è Th∆∞∆°ng hi·ªáu", options=df_sku["Brand"].dropna().unique())
    selected_gender = st.selectbox("üßç Gi·ªõi t√≠nh", options=["T·∫•t c·∫£"] + list(df_sku["Gi·ªõi t√≠nh"].dropna().unique()))

# ----------------- Ch·ªçn tr·ªçng s·ªë tr·ª±c quan -----------------
st.markdown("### ‚öñÔ∏è T√πy ch·ªçn ∆∞u ti√™n x·∫øp h·∫°ng")
st.markdown(
    """
    <div style='padding-bottom:8px;'>
        <strong>üéØ ∆Øu ti√™n:</strong> <br>
        <span style='color:gray;'>0 = ∆Øu ti√™n g·∫ßn h∆°n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;‚û°Ô∏è &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;100 = ∆Øu ti√™n nhi·ªÅu SKU h∆°n</span>
    </div>
    """, unsafe_allow_html=True
)
priority_sku = st.slider("", 0, 100, 60)

# ----------------- N√∫t x·ª≠ l√Ω -----------------
if st.button("üîç T√¨m c·ª≠a h√†ng ph√π h·ª£p"):
    if not user_address or len(user_address.strip()) < 10:
        st.warning("‚ùó Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ chi ti·∫øt.")
    else:
        try:
            geolocator = Nominatim(user_agent="matkinh_app", timeout=10)

            def normalize_address(addr):
                addr = unicodedata.normalize('NFD', addr)
                addr = addr.encode('ascii', 'ignore').decode('utf-8')
                addr = re.sub(r'\b(Duong|Phuong|Quan)\b', '', addr, flags=re.IGNORECASE)
                addr = addr.replace("TP.HCM", "Ho Chi Minh City").replace("H·ªì Ch√≠ Minh", "Ho Chi Minh City")
                addr = re.sub(r'\s+', ' ', addr).strip()
                return addr

            location = geolocator.geocode(user_address)
            if location is None:
                fallback = normalize_address(user_address)
                location = geolocator.geocode(fallback)

            if location is None:
                st.warning(f"‚ùå Kh√¥ng t√¨m ƒë∆∞·ª£c v·ªã tr√≠. Vui l√≤ng ki·ªÉm tra l·∫°i ƒë·ªãa ch·ªâ.")
                st.stop()
            else:
                user_location = (location.latitude, location.longitude)
                st.success(f"üìç ƒê√£ x√°c ƒë·ªãnh v·ªã tr√≠ t·ª´: `{user_address}`")

                def approx_equal(a, b, tol=0.0005):
                    return abs(a - b) < tol

                for _, row in df_store.iterrows():
                    if approx_equal(row["Lat"], user_location[0]) and approx_equal(row["Lon"], user_location[1]):
                        user_location = (row["Lat"], row["Lon"])
                        break

                # L·ªçc theo ng√¢n s√°ch
                df_sku_filtered = df_sku[(df_sku['Price'] >= min_price) & (df_sku['Price'] <= max_price)]

                # L·ªçc theo b·ªô l·ªçc
                if selected_colors:
                    df_sku_filtered = df_sku_filtered[df_sku_filtered["Color"].isin(selected_colors)]
                if selected_types:
                    df_sku_filtered = df_sku_filtered[df_sku_filtered["Type"].isin(selected_types)]
                if selected_brands:
                    df_sku_filtered = df_sku_filtered[df_sku_filtered["Brand"].isin(selected_brands)]
                if selected_gender != "T·∫•t c·∫£":
                    df_sku_filtered = df_sku_filtered[df_sku_filtered["Gi·ªõi t√≠nh"] == selected_gender]

                sku_count = df_sku_filtered.groupby("C·ª≠a h√†ng").size().reset_index(name="SKU ph√π h·ª£p")
                df_merged = df_store.merge(sku_count, on="C·ª≠a h√†ng", how="left").fillna(0)
                df_merged["SKU ph√π h·ª£p"] = df_merged["SKU ph√π h·ª£p"].astype(int)
                df_filtered = df_merged[df_merged["SKU ph√π h·ª£p"] > 0].copy()

                if df_filtered.empty:
                    st.warning("‚ö†Ô∏è Kh√¥ng c√≥ c·ª≠a h√†ng n√†o c√≥ s·∫£n ph·∫©m ph√π h·ª£p v·ªõi ti√™u ch√≠ c·ªßa b·∫°n.")
                else:
                    df_filtered["Kho·∫£ng c√°ch (km)"] = df_filtered.apply(
                        lambda row: geodesic(user_location, (row["Lat"], row["Lon"])).km, axis=1
                    )
                    df_filtered["score_distance"] = 1 / (1 + df_filtered["Kho·∫£ng c√°ch (km)"])
                    df_filtered["score_sku"] = df_filtered["SKU ph√π h·ª£p"] / df_filtered["SKU ph√π h·ª£p"].max()

                    sku_weight = priority_sku / 100
                    distance_weight = 1 - sku_weight

                    df_filtered["ƒêi·ªÉm t·ªïng"] = (
                        df_filtered["score_distance"] * distance_weight +
                        df_filtered["score_sku"] * sku_weight
                    ).round(4)

                    best_store = df_filtered.sort_values("ƒêi·ªÉm t·ªïng", ascending=False).iloc[0]
                    st.markdown("### üèÜ C·ª≠a h√†ng n√™n gh√© thƒÉm:")
                    st.write(f"**{best_store['C·ª≠a h√†ng']}** ‚Äî {best_store['SKU ph√π h·ª£p']} SKU ph√π h·ª£p | "
                             f"{best_store['Kho·∫£ng c√°ch (km)']:.2f} km | "
                             f"ƒêi·ªÉm ∆∞u ti√™n: {best_store['ƒêi·ªÉm t·ªïng']}")

                    st.markdown("### üåç Heatmap ∆∞u ti√™n c·ª≠a h√†ng")

                    m = folium.Map(location=user_location, zoom_start=13)
                    folium.Marker(user_location, tooltip="üìç V·ªã tr√≠ c·ªßa b·∫°n", icon=folium.Icon(color='red')).add_to(m)

                    heat_data = [[row["Lat"], row["Lon"], row["ƒêi·ªÉm t·ªïng"]] for _, row in df_filtered.iterrows()]
                    HeatMap(heat_data, radius=20).add_to(m)

                    for _, row in df_filtered.iterrows():
                        folium.Marker(
                            location=(row["Lat"], row["Lon"]),
                            tooltip=f"{row['C·ª≠a h√†ng']} | SKU: {row['SKU ph√π h·ª£p']} | ƒêi·ªÉm: {row['ƒêi·ªÉm t·ªïng']}",
                            popup=row["C·ª≠a h√†ng"]
                        ).add_to(m)

                    map_html = m._repr_html_()
                    st.components.v1.html(map_html, height=600, scrolling=True)

                    st.markdown("### üìã Danh s√°ch c·ª≠a h√†ng g·ª£i √Ω")
                    styled_df = df_filtered[["C·ª≠a h√†ng", "SKU ph√π h·ª£p", "Kho·∫£ng c√°ch (km)", "ƒêi·ªÉm t·ªïng"]].sort_values(
                        "ƒêi·ªÉm t·ªïng", ascending=False
                    ).reset_index(drop=True)

                    styled_df = styled_df.style.set_table_styles([
                        {'selector': 'th', 'props': [('text-align', 'center')]},
                        {'selector': 'td', 'props': [('text-align', 'center')]}
                    ]).set_properties(**{'text-align': 'center'})

                    st.markdown(styled_df.to_html(index=False), unsafe_allow_html=True)

        except Exception as e:
            st.error(f"‚ùå L·ªói khi x·ª≠ l√Ω: {e}")
